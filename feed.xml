<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-01T15:06:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Think How!</title><subtitle>This is a test site for another GitHub pages. The site has blogs about programming</subtitle><entry><title type="html">Setting Up GCP Instance for Deep Learning</title><link href="http://localhost:4000/2019/10/30/setting-up-gcp-instance-for-deep-learning.html" rel="alternate" type="text/html" title="Setting Up GCP Instance for Deep Learning" /><published>2019-10-30T09:40:00+09:00</published><updated>2019-10-30T09:40:00+09:00</updated><id>http://localhost:4000/2019/10/30/setting-up-gcp-instance-for-deep-learning</id><content type="html" xml:base="http://localhost:4000/2019/10/30/setting-up-gcp-instance-for-deep-learning.html">&lt;p&gt;This post is going to be very different from what I write here.
The content is a memo how I create a GCP (Google Cloud Platform) instance for Deep Learning.
While I study algorithm stuff, I also have been studying Deep Learning.
In my early days, I tried to train my Deep Learning model only on a laptop.
My laptop is 2012 model MacBook Pro, so I would say it is reasonably fast.
However, when it comes to Deep Learning, the training was quite painful on the such machine.
Often, I ran the training over night to get a disappointed result.
Still, I didn’t use any of pricey cloud environment
since it was my personal study unrelated to my day job.
I wanted to save money.&lt;/p&gt;

&lt;p&gt;A couple of years later, I took a &lt;a href=&quot;https://www.fast.ai/&quot;&gt;fast.ai&lt;/a&gt; course to study Deep Learning again.
During an introductory session, the instructor said “Pay money. That makes the training easy.”
Yes, that’s right.
Google Colab is fantastic, but it won’t save the instance I create.
Every time, I need to upload data, install libraries, start training from the beginning, etc.
Since then, I started using GCP for my Deep Learning study.&lt;/p&gt;

&lt;p&gt;In the introductory session, the instructor mentioned 4 or 5 platforms.
The reason I chose GCP is:
it provides a command line tool and allows to ssh to the instance.
This style is something I’m familiar with from my past experience on AWS.
The cost should not be so expensive as far as the instance is stopped when not using.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I once made a painful mistake while I was studying Kubernetes.
I interrupted my study for a reason, just a chore, then totally forgot some instances were up and running.
After a week or so, I realized I left those running…ouch!
I had to pay some hundred bucks for nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The fast.ai document “&lt;a href=&quot;https://course.fast.ai/start_gcp.html&quot;&gt;GCP&lt;/a&gt;” is very helpful.
Just following the document, people can easily get their instance running on GCP.
One caveat is the document has a fast.ai specific part.
For example, fast.ai library is written on top of PyTorch, so the image is pytorch-xxx.
Now, I wanted to use TensorFlow, so I should change some of parameters.
Additionally, I wanted to figure out what those parameters mean.
That’s why I decided to write this memo.
This blog post includes resources what I found after some research.&lt;/p&gt;

&lt;h3 id=&quot;get-started-gcp&quot;&gt;Get Started GCP&lt;/h3&gt;

&lt;p&gt;I’m a Google platform user since Google App Engine (GAE) was firstly released.
The account is the same as GAE, so I didn’t need to create my account for GCP.
However, if this is the very first time, you need to create an account.
This should be fairly easy.
Go to &lt;a href=&quot;https://cloud.google.com&quot;&gt;https://cloud.google.com&lt;/a&gt; and click “Get started for free” button.
Again, if this is the very first time to use Google platform, you will get $300 of an initial credit.
In my case, unfortunately, the sweet treat of 300 bucks were disappeared, probably, far back.
Even though this is the first time to use &lt;strong&gt;GCP&lt;/strong&gt; (after renamed to it), no free credit to old users.&lt;/p&gt;

&lt;p&gt;Don’t forget or postpone to add your credit card to the account.
Whether the free credit is there or not, GCP requires the billing setup.
Go to &lt;a href=&quot;https://console.cloud.google.com/billing&quot;&gt;https://console.cloud.google.com/billing&lt;/a&gt;
and create the billing account.&lt;/p&gt;

&lt;h3 id=&quot;install-or-update-google-cli-sdk&quot;&gt;Install or Update Google CLI (SDK)&lt;/h3&gt;

&lt;p&gt;If you don’t like a command line tool, I believe you can do all using web interface.
If you go to &lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;https://console.cloud.google.com/&lt;/a&gt;, you see menus.&lt;/p&gt;

&lt;p&gt;I like the command line tool, so I’m going to write about CLI.&lt;/p&gt;

&lt;p&gt;The first step is to install Google CLI or update if already installed.
The CLI is called &lt;strong&gt;SDK&lt;/strong&gt; and whose installation document resides at &lt;a href=&quot;https://cloud.google.com/sdk/docs/quickstarts&quot;&gt;https://cloud.google.com/sdk/docs/quickstarts&lt;/a&gt;.
Since I’m a macOS user, I followed &lt;a href=&quot;https://cloud.google.com/sdk/docs/quickstart-macos&quot;&gt;https://cloud.google.com/sdk/docs/quickstart-macos&lt;/a&gt;.
The document says it needs Python 2.7, but I didn’t need Python 2.7.
The latest SDK version is 269.0.0 as of the end of October 2019.
The document says an experimental support of Python 3.4+ is from version 206.0.0 which is much old.
In my guess, the document has not been updated for long.&lt;/p&gt;

&lt;p&gt;If you have SDK installed already, update it by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gcloud components update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setting-up-sdk&quot;&gt;Setting up SDK&lt;/h3&gt;

&lt;p&gt;The next step is to set up SDK.
The document to look at is
&lt;a href=&quot;https://cloud.google.com/sdk/docs/initializing&quot;&gt;https://cloud.google.com/sdk/docs/initializing&lt;/a&gt;.
Type the command below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gcloud init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command does:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;create/re-initialize/switch configuration&lt;/li&gt;
  &lt;li&gt;login authentication&lt;/li&gt;
  &lt;li&gt;create/switch project&lt;/li&gt;
  &lt;li&gt;set region/zone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The configuration has four types of information: zone, account, project, reporting.
You should set parameters except reporting during the configuration.
Setting up goes interactive on command line.&lt;/p&gt;

&lt;p&gt;Among three parameters, the region/zone choice may confuse you.
Have a look at the document &lt;a href=&quot;https://cloud.google.com/compute/docs/regions-zones/&quot;&gt;https://cloud.google.com/compute/docs/regions-zones/&lt;/a&gt;.
The document describes an actual location and detailed features.
In general, it’s good to choose a geologically close region in terms of a network latency.
However, in a real situation, it may be good to choose not so busy or very powerful region.
You’d better to try some regions and test in what region the instance starts faster.&lt;/p&gt;

&lt;p&gt;Another important point to choose the zone is GPU support.
For Deep Learning, definitely, you should use GPU.
If you look at the Regions and Zones document, it’s clear what zones support GPUs.&lt;/p&gt;

&lt;p&gt;Once the configuration is done, the command shows details in the end.
The command below also shows the current configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gcloud config list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;create-an-instance&quot;&gt;Create an Instance&lt;/h3&gt;

&lt;p&gt;To create an instance, a lot of options should be specified.
To figure out what those should be, you need to look at multiple documents.&lt;/p&gt;

&lt;p&gt;First, the command to create an instance starts from &lt;code&gt;gcloud compute instances create ...&lt;/code&gt;.
The command reference is: &lt;a href=&quot;https://cloud.google.com/sdk/gcloud/reference/compute/instances/create&quot;&gt;https://cloud.google.com/sdk/gcloud/reference/compute/instances/create&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The options to be specified are below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Instance Name&lt;/p&gt;

    &lt;p&gt;As the command reference shows, at least one instance name must be provided.
  The name can be any as long as it satisfies the requirement described in the document,
  &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/custom-hostname-vm&quot;&gt;https://cloud.google.com/compute/docs/instances/custom-hostname-vm&lt;/a&gt;.
  The document says the name should be “matching the regular expression &lt;code&gt;[a-z]([-a-z0-9]*[a-z0-9])?&lt;/code&gt;”.
  Only one instance would be good enough, so only one instance name is good to go.
  The instance name is a hostname to ssh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Zone&lt;/p&gt;

    &lt;p&gt;This is a zone specified during the config setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Image Family&lt;/p&gt;

    &lt;p&gt;For a Machine Learning/Deep Learning purpose,
  GCP provides images which have packages/libraries frequently used in ML/DL.
  Look at the document &lt;a href=&quot;https://cloud.google.com/ai-platform/deep-learning-vm/docs/images&quot;&gt;https://cloud.google.com/ai-platform/deep-learning-vm/docs/images&lt;/a&gt;.
  Combinations of framework/version/processor are the differences of images.
  For example, I’m going to use TensorFlow 2.0 with GPU, my choice is &lt;code&gt;tf2-latest-gpu&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;To choose images for Deep Learning, &lt;code&gt;--image-project=deeplearning-platform-release&lt;/code&gt;
  option should be specified as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Machine Type&lt;/p&gt;

    &lt;p&gt;The detailed information about machine types is:
  &lt;a href=&quot;https://cloud.google.com/compute/docs/machine-types&quot;&gt;https://cloud.google.com/compute/docs/machine-types&lt;/a&gt;.
  Deep Learning tends to need more memory.
  Probably, &lt;code&gt;n1-highmem-4&lt;/code&gt; or &lt;code&gt;n1-highmem-8&lt;/code&gt; are the good choices.
  Also, look at the pricing document which one to choose:
  &lt;a href=&quot;https://cloud.google.com/ml-engine/docs/pricing&quot;&gt;https://cloud.google.com/ml-engine/docs/pricing&lt;/a&gt;.
  The price per hour is $0.2368 for &lt;code&gt;n1-highmem-4&lt;/code&gt; and $0.4736 for &lt;code&gt;n1-highmem-8&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Type the command below to check what machine types are available in your zone.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ gcloud compute machine-types list --zones=ZONE 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accelerator&lt;/p&gt;

    &lt;p&gt;Type the command below to see what accelerators are supported in what zones.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ gcloud compute accelerator-types list
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Also, check the pricing document,
  &lt;a href=&quot;https://cloud.google.com/ml-engine/docs/pricing&quot;&gt;https://cloud.google.com/ml-engine/docs/pricing&lt;/a&gt;.
  A budget type NVIDIA_TESLA_K80 is $0.4500/hour,
  and more powerful type NVIDIA_TESLA_P4 costs $0.6000/hour.&lt;/p&gt;

    &lt;p&gt;To use NVIDIA accelerator, &lt;code&gt;--metadata=&quot;install-nvidia-driver=True&quot;&lt;/code&gt; option
  should be specified as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boot Disk Size&lt;/p&gt;

    &lt;p&gt;To train the Deep Learning model, more data leads to better result.
  Given that, &lt;code&gt;200GB&lt;/code&gt; may be a good size.
  Again, check the pricing document,
  &lt;a href=&quot;https://cloud.google.com/compute/disks-image-pricing&quot;&gt;https://cloud.google.com/compute/disks-image-pricing&lt;/a&gt;.
  Depends on the zones, the same disk size costs differently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Budget Type Setting&lt;/p&gt;

    &lt;p&gt;To save money, &lt;code&gt;--preemptible&lt;/code&gt; is a nice option to have.
  The instance automatically shuts down after 24 hours.
  The details are in the document,
  &lt;a href=&quot;https://cloud.google.com/preemptible-vms/&quot;&gt;https://cloud.google.com/preemptible-vms/&lt;/a&gt;.
  Downside is, the instance stops while using depending on how busy the host machine is.
  If your preemptible instance stops frequently, try a different zone.&lt;/p&gt;

    &lt;p&gt;Another budget option is &lt;code&gt;--maintenance-policy=TERMINATE&lt;/code&gt;.
  The option defines the policy when the host machine goes maintenance.
  This choice is &lt;code&gt;MIGRATE&lt;/code&gt; or &lt;code&gt;TERMINATE&lt;/code&gt;.
  When &lt;code&gt;--preemptible&lt;/code&gt; is specified, the instance never migrates.
  But, it doesn’t harm to specify &lt;code&gt;TERMINATE&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering above, the budget type instance creation would become below.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/b13272ac6bb4f7b2a7abdaddd5ed175c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The instance creation takes a while.
When the prompt returns after typing the command above, go to GCP console,
&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;https://console.cloud.google.com/&lt;/a&gt;.
You may need to choose the project whose name is the one you set during the configuration.
Then, click the hamburger icon (navigation menu) on the top left, Compute Engine, VM instances.
You’ll see your instance is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/vm-instance.png&quot; alt=&quot;vm instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t forget to stop the instance.
To stop the instance, click three dots icon on the right side and choose Stop.&lt;/p&gt;

&lt;p&gt;To use again, click the three dots icon and choose Start.&lt;/p&gt;

&lt;p&gt;Alternatively, you can start/stop the instance from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# $INSTANCE_NAME is an INSTANCE_NAME environment variable
# which is set when above command gets run

$ gcloud compute instances start $INSTANCE_NAME
$ gcloud compute instances stop $INSTANCE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;use-the-instance&quot;&gt;Use the Instance&lt;/h3&gt;

&lt;p&gt;Now, the instance is up an running. It’s time to use it.
Since the image is for Deep Learning, it has a setting to start jupyter notebook when the instance is up.
An easy way is to use &lt;strong&gt;ssh tunneling&lt;/strong&gt;.
Type the command below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gcloud compute ssh jupyter@$INSTANCE_NAME -- -L 8080:localhost:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;jupyter&lt;/code&gt;: default user name on the instance.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$INSTANCE_NAME&lt;/code&gt;: &lt;code&gt;INSTANCE_NAME&lt;/code&gt; environment variable. The name is given when the instance is created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it is the first time to login to the instance, the command line tool asks a password to create ssh key.
The public and private keys are saved as
&lt;code&gt;~/.ssh/google_compute_engine.pub&lt;/code&gt; and &lt;code&gt;~/.ssh/google_compute_engine&lt;/code&gt; on a local machine.&lt;/p&gt;

&lt;p&gt;Once the ssh connection is established, you are logged in to the instance as a user jupyter.
At the same time, jupyter notebook is available to use on a local machine.
Go to the web browser and hit the URL, &lt;code&gt;http://localhost:8080/tree&lt;/code&gt;.
The jupyter notebook below shows up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/notebook.png&quot; alt=&quot;jupyter notebook&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;access-github-repositories&quot;&gt;Access Github Repositories&lt;/h3&gt;

&lt;p&gt;You may create a Deep Learning stuff only on jupyter notebook.
However, it’s very convenient to have an access to Github repos.
Setting up is as easy as you’ve done on a local machine, laptop whatever.&lt;/p&gt;

&lt;p&gt;The set up starts from generating an ssh key pair.
The good document is,
“&lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot;&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Click Linux tab since the instance is Debian Linux. Then, follow the instruction.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Generate a SSH Key on the instance&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; jupyter@my-tf2-instance:~$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start ssh-agent&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; jupyter@my-tf2-instance:~$ eval &quot;$(ssh-agent -s)&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add ssh private key&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; jupyter@my-tf2-instance:~$ ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next is to add the generated ssh public key to your GitHub account.
Have a look at the document,
“&lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account&quot;&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;”.
Follow the instruction and add the public key created on the instance.&lt;/p&gt;

&lt;p&gt;When the set up is finished, you can access GitHub repos from the instance like you do on your local machine.
For example, &lt;code&gt;git clone ...&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt; etc.&lt;/p&gt;

&lt;h3 id=&quot;install-python37&quot;&gt;Install Python3.7&lt;/h3&gt;

&lt;p&gt;The GCP instance comes with Python2.7 and 3.5.
Python3.5 would work well.
However, sometime, an environment setting specifies Python3.7.
Rather than editing such setting, installing Python3.7 makes things easy.&lt;/p&gt;

&lt;p&gt;A helpful explanation is among StackOverflow questions:
“&lt;a href=&quot;https://stackoverflow.com/questions/53468831/how-do-i-install-python-3-7-in-google-cloud-shell&quot;&gt;How do I install Python 3.7 in google cloud shell&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Below is an excerpt from the answer (the version is updated).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install requirements
jupyter@my-tf2-instance:~$ sudo apt-get install -y build-essential checkinstall libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev openssl libffi-dev python3-dev python3-setuptools wget 

# Prepare to build
jupyter@my-tf2-instance:~$ mkdir /tmp/Python37
jupyter@my-tf2-instance:~$ cd /tmp/Python37

# Pull down Python 3.7, build, and install
jupyter@my-tf2-instance:~$ wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz
jupyter@my-tf2-instance:~$ tar xvf Python-3.7.4.tar.xz
jupyter@my-tf2-instance:~$ cd /tmp/Python37/Python-3.7.4
jupyter@my-tf2-instance:~$ ./configure
jupyter@my-tf2-instance:~$ sudo make altinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python3.7 should be installed under &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, three Pythons are installed in a single instance.
So that three Pythons can be switched, it’s a good idea to install those as alternatives.
The command below does that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jupyter@my-tf2-instance:~$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 2
jupyter@my-tf2-instance:~$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 3
jupyter@my-tf2-instance:~$ sudo update-alternatives --install /usr/bin/python python /usr/local/bin/python3.7 4

jupyter@my-tf2-instance:~$ sudo update-alternatives --config python
There are 3 choices for the alternative python (providing /usr/bin/python).

  Selection    Path                      Priority   Status
------------------------------------------------------------
* 0            /usr/local/bin/python3.7   4         auto mode
  1            /usr/bin/python2.7         2         manual mode
  2            /usr/bin/python3.5         3         manual mode
  3            /usr/local/bin/python3.7   4         manual mode

Press &amp;lt;enter&amp;gt; to keep the current choice[*], or type selection number: 0

# Do the same installation for pip

jupyter@my-tf2-instance:~$ sudo rm /usr/bin/pip
jupyter@my-tf2-instance:~$ sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip2 2
jupyter@my-tf2-instance:~$ sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 3
jupyter@my-tf2-instance:~$ sudo update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip3.7 4
jupyter@my-tf2-instance:~$ sudo update-alternatives --config pip
There are 3 choices for the alternative pip (providing /usr/bin/pip).

  Selection    Path                   Priority   Status
------------------------------------------------------------
* 0            /usr/local/bin/pip3.7   4         auto mode
  1            /usr/bin/pip2           2         manual mode
  2            /usr/bin/pip3           3         manual mode
  3            /usr/local/bin/pip3.7   4         manual mode

Press &amp;lt;enter&amp;gt; to keep the current choice[*], or type selection number: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setup-pipenv&quot;&gt;Setup Pipenv&lt;/h3&gt;

&lt;p&gt;The cloned Deep Learning project may have &lt;code&gt;Pipfile/Pipfile.lock&lt;/code&gt;.
This is a “&lt;strong&gt;&lt;a href=&quot;http://pipenv.kennethreitz.org/en/latest/&quot;&gt;Pipenv&lt;/a&gt;&lt;/strong&gt;” setting file.
The &lt;code&gt;Pipenv&lt;/code&gt; is a Python’s package manager like JavaScript’s npm/yarn or Ruby’s bundler.
Automatically started jupyter notebook doesn’t have &lt;code&gt;Pipenv&lt;/code&gt; setting on the instance.
This section is about to use &lt;code&gt;Pipenv&lt;/code&gt; on the GCP instance.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Look at system services&lt;/p&gt;

    &lt;p&gt;To control the jupyter process, you need to use a &lt;code&gt;systemctl&lt;/code&gt; command.
The &lt;code&gt;systemctl&lt;/code&gt; command controls background processes on Debian Linux.
For example, type below:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jupyter@my-tf2-instance:~$ sudo systemctl status
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;The command above lists services controlled by the system.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/systemctl-output.png&quot; alt=&quot;systemctl output&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The &lt;code&gt;jupyter.service&lt;/code&gt; is among them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop and disable &lt;code&gt;jupyter.servce&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;If you recognize &lt;code&gt;Pipfile&lt;/code&gt; in the project, you want to run jupyter notebook under a particular environment.
 GCP’s default jupyter startup service won’t be used in such case.
 Run the commands below to stop and disable jupyter service.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ sudo systemctl stop jupyter
 $ sudo systemctl disable jupyter
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create environment&lt;/p&gt;

    &lt;p&gt;Python3.7 comes with virtual environment tool, &lt;code&gt;pyvenv&lt;/code&gt;.
 It is handy to create a project specific environment.
 Go to the directory which has the &lt;code&gt;Pipfile&lt;/code&gt; and run the commands below.
 The command prompt will have a prefix &lt;code&gt;(env)&lt;/code&gt;.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; jupyter@my-tf2-instance:~/intro-to-deep-learning$ python -m venv env
 jupyter@my-tf2-instance:~/intro-to-deep-learning$ source env/bin/activate
 (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code&gt;pipenv&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;For some reason, when &lt;code&gt;pipenv&lt;/code&gt; is simply installed by &lt;code&gt;pip install pipenv&lt;/code&gt;,
 the &lt;code&gt;pipenv install&lt;/code&gt; command raises a confusing error.
 The solution for this error is discussed on the GitHub issue,
 &lt;a href=&quot;https://github.com/pypa/pipenv/issues/3468&quot;&gt;https://github.com/pypa/pipenv/issues/3468&lt;/a&gt;.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ pip install -e git+https://github.com/pypa/pipenv.git@master#egg=pipenv
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code&gt;pipenv&lt;/code&gt; environment&lt;/p&gt;

    &lt;p&gt;Next is the installation by the &lt;code&gt;pipenv&lt;/code&gt; command to create
 the same runtime environment specified in the &lt;code&gt;Pipfile&lt;/code&gt;.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ pipenv install
 (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ pipenv shell

 # Do some more installation, for example
 (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ jupyter contrib nbextension install --user
 (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ jupyter nbextensions_configurator enable --user
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start &lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Everything is ready. Let’s start up the &lt;code&gt;jupyter notebook&lt;/code&gt;.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ jupyter notebook
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Above may raise some errors since newly installed jupyter doesn’t have some extensions installed.
 However, the notebook itself starts running.&lt;/p&gt;

    &lt;p&gt;Be careful about installing extensions, especially labextension.
 The installed extensions may load Python 3.5.
 As a result, whole notebook will use Python 3.5 even though the Python to
 start &lt;code&gt;jupyter notebook&lt;/code&gt; is 3.7.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect to &lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The &lt;code&gt;jupyter notebook&lt;/code&gt; is running on the port 8080.
 The tunneling has been enabled on the port 8080, so like you did already,
 go to the web browser and hit &lt;code&gt;http://localhost:8080/tree&lt;/code&gt;.
 You’ll see project files on the notebook.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deactivate the virtual environment&lt;/p&gt;

    &lt;p&gt;After shutting down the notebook, you should deactivate the virtual environment.
 The command below does that.
 After deactivated, the command line prompt changes.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ deactivate
 jupyter@my-tf2-instance:~/intro-to-deep-learning$
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;continue-to-work-on-another-day&quot;&gt;Continue to Work on Another Day&lt;/h3&gt;

&lt;p&gt;All installations have been done.
When you continue to work on another day, what to do is much less.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start the instance&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ gcloud compute instances start $INSTANCE_NAME
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSH to the instance with tunneling&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ gcloud compute ssh jupyter@$INSTANCE_NAME -- -L 8080:localhost:8080
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Activate the environment&lt;/p&gt;

    &lt;p&gt;This memo assumes the environment setting is provided by &lt;code&gt;Pipfile&lt;/code&gt;,
 so go to the project directory which has &lt;code&gt;Pipfile&lt;/code&gt;.
 Then, activate the environment.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; jupyter@my-tf2-instance:~$ cd intro-to-deep-learning
 jupyter@my-tf2-instance:~/intro-to-deep-learning$ source env/bin/activate
 (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ pipenv shell
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start &lt;code&gt;jupyter notebook&lt;/code&gt; and use it&lt;/p&gt;

    &lt;p&gt;Start the &lt;code&gt;jupyter notebook&lt;/code&gt;, then go to the web browser.
 The URL is &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; (env) jupyter@my-tf2-instance:~/intro-to-deep-learning$ jupyter notebook 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add SSH from the instance to GitHub&lt;/p&gt;

    &lt;p&gt;When you login to the instance, the SSH identity to access GitHub repos is not saved.
 Startup ssh authentication agent and add identity.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; jupyter@my-tf2-instance:~$ eval &quot;$(ssh-agent -s)&quot;
 jupyter@my-tf2-instance:~$ ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After the work&lt;/p&gt;

    &lt;p&gt;Shutdown the notebook, deactivate the virtual environment, and exit the shell.
 Don’t forget to stop the instance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;in-the-end&quot;&gt;In The End&lt;/h3&gt;

&lt;p&gt;This type of work tends to take time, experience hard time.
Sometime, it is frustrating since some don’t work as in the documents.
Sometime, the document is missing something, or something is different in my box.&lt;/p&gt;

&lt;p&gt;My memo may not help you. My memo may have extra you don’t need.
Often, what people want to do are a bit different from other people do.
Also, there are a couple or many ways to accomplish that.&lt;/p&gt;

&lt;p&gt;This memo is just an example how I set up those.
I’m pretty sure I’ll forget how I did.
This memo will help future myself to recall how I could setup my GCP instance in the past.
If this memo helps you, that’s more than happy to me.&lt;/p&gt;</content><author><name>Yoko Harada</name></author><summary type="html">This post is going to be very different from what I write here. The content is a memo how I create a GCP (Google Cloud Platform) instance for Deep Learning. While I study algorithm stuff, I also have been studying Deep Learning. In my early days, I tried to train my Deep Learning model only on a laptop. My laptop is 2012 model MacBook Pro, so I would say it is reasonably fast. However, when it comes to Deep Learning, the training was quite painful on the such machine. Often, I ran the training over night to get a disappointed result. Still, I didn’t use any of pricey cloud environment since it was my personal study unrelated to my day job. I wanted to save money.</summary></entry><entry><title type="html">Complete Binary Tree</title><link href="http://localhost:4000/2019/09/10/complete-binary-tree.html" rel="alternate" type="text/html" title="Complete Binary Tree" /><published>2019-09-10T13:19:00+09:00</published><updated>2019-09-10T13:19:00+09:00</updated><id>http://localhost:4000/2019/09/10/complete-binary-tree</id><content type="html" xml:base="http://localhost:4000/2019/09/10/complete-binary-tree.html">&lt;p&gt;Problems which ask a binary tree traverse, add/delete nodes, etc. are popular in algorithm questions.
The binary trees are often just a binary tree or binary search tree.
Sometimes, the problem pinpoints a particular type of a binary tree,
for example, a balanced binary tree or complete binary tree.&lt;/p&gt;

&lt;p&gt;The complete binary tree has unique properties.
Problems which specify the tree as the complete binary tree expect an efficient
solution based on the tree’s properties.
I found it is an interesting topic, so I decided to write a post about the complete binary tree.&lt;/p&gt;

&lt;p&gt;Well, what is exactly the complete binary tree?
Wikipedia’s article about &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_tree&quot;&gt;Binary Tree&lt;/a&gt; explains that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In a complete binary tree every level, except possibly the last,
is completely filled, and all nodes in the last level are as far left
as possible. It can have between 1 and 2^h nodes at the last level h.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the above definition, in every level, nodes are filled out strictly from left to right.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete binary tree      not complete binary tree
    1                              1
   / \                            / \
  2   3                          2   3
 /                                \
4                                  4

      1                            1
    /   \                        /  \ 
  2      3                      2    3
 / \    /                      /    / \ 
4   5  6                      4    5   6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the complete binary tree, it’s easy to store the tree in an array.
For example, the second complete binary tree above can be expressed by
&lt;code&gt;[1, 2, 3, 4, 5, 6]&lt;/code&gt;.
This would remind a heap data structure. In fact, the heap is the complete binary tree.&lt;/p&gt;

&lt;p&gt;Another interesting property is the left and right subtree’s heights.
The left subtree is always higher or equal to the right subtree.
When the right subtree exists the left subtree should be completely filled.&lt;/p&gt;

&lt;p&gt;For now, we learned the completed binary tree’s properties, it’s time to look at algorithm problems.&lt;/p&gt;

&lt;h4 id=&quot;counting-nodes-in-the-complete-binary-tree&quot;&gt;Counting Nodes in the Complete Binary Tree&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Problem description&lt;/strong&gt;: Given a complete binary tree, find how many nodes are in the tree.&lt;/p&gt;

&lt;p&gt;A naive solution is obvious – traverse the tree whether level order or pre-order.
The correct answer will be found.
However, when the tree type is specified as the complete binary tree, there’s no need to traverse all.
The solution should use the complete binary tree property that nodes are packed to the left.&lt;/p&gt;

&lt;p&gt;This is the problem to compare left and right subtree heights.
At some level, if the right subtree has the same height as the left subtree, that level is all filled.
For example, the second complete binary tree above has the same left and right subtree heights at the level of node 2 and 3.
That means the left subtree is completely filled, so the next step goes to the right subtree to check.
If the left subtree is higher at some level as described in the first complete binary tree,
the next step goes left to check.&lt;/p&gt;

&lt;p&gt;Below is the code example of counting problem. It takes a bottom up counting style.&lt;/p&gt;

&lt;h4 id=&quot;code-example-of-node-count&quot;&gt;Code Example of Node Count&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/64781fb9082954396c34272dd94ae705.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The performance is: time &lt;code&gt;O(log(n))&lt;/code&gt;, space &lt;code&gt;O(h)&lt;/code&gt;, where n: number of nodes, h: height of the tree.&lt;/p&gt;

&lt;h4 id=&quot;validating-a-completeness-of-binary-tree&quot;&gt;Validating a Completeness of Binary Tree&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Problem description&lt;/strong&gt;: Given a binary tree, check if it is a complete binary tree.&lt;/p&gt;

&lt;p&gt;Like counting problem, left and right subtree’s heights are a clue to find an answer.
If the right subtree is higher as in the first not complete binary tree, it is invalid.
If the left subtree if higher more than one, it is invalid.
When left min and max heights are not the same, the right min/max should be the same as the left min.&lt;/p&gt;

&lt;p&gt;Below is the code example of validation problem. It takes post-order traversal style.&lt;/p&gt;

&lt;h4 id=&quot;code-example-of-completeness-check&quot;&gt;Code Example of Completeness check&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/e66a00ad3d523577a515e403d26581a1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The performance is: time &lt;code&gt;O(n)&lt;/code&gt;, space &lt;code&gt;O(h)&lt;/code&gt;, where n: number of nodes, h: height of the tree.&lt;/p&gt;

&lt;h4 id=&quot;designing-a-complete-binary-tree-inserter&quot;&gt;Designing a Complete Binary Tree Inserter&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Problem description&lt;/strong&gt;: Write a data structure &lt;code&gt;CBTInserter&lt;/code&gt; which is initialized by a
complete binary tree and provides operations below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;CBTInserter(TreeNode root)&lt;/code&gt;: initializes the data structure with the root of the complete binary tree&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;insert(int v)&lt;/code&gt;: inserts a new node with the value &lt;code&gt;v&lt;/code&gt; to the tree and returns the value of the parent node. After the insertion, the tree should keep the completeness.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;get_root()&lt;/code&gt;: returns the root node of the tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a problem to use heap-like data structure internally.
Under a zero based index, left and right children are on the index of &lt;code&gt;2*i+1&lt;/code&gt; and &lt;code&gt;2*i+2&lt;/code&gt; respectively
when the parent node is at index &lt;code&gt;i&lt;/code&gt;.
When the child is on the index &lt;code&gt;i&lt;/code&gt;, its parent is at index &lt;code&gt;(i-1) / 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the class is initialized, the given tree will be saved in an array using level order traversal.
When a new node is inserted, the parent’s index is easily found from the array length.
So the new node can be added to its parent’s left or right child easily.&lt;/p&gt;

&lt;h4 id=&quot;code-example-of-complete-binary-tree-inserter&quot;&gt;Code Example of Complete Binary Tree Inserter&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/afa881446150ce323492d31d30738f4d.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The performance is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;initialization: time: &lt;code&gt;O(n)&lt;/code&gt;, space: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;insert: time &lt;code&gt;O(1)&lt;/code&gt;, space: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;get_root: time &lt;code&gt;O(1)&lt;/code&gt;, space: &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ressources&quot;&gt;Ressources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Wikipedia: &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees&quot;&gt;Types of Binary Tree&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html&quot;&gt;Binary Heaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">Problems which ask a binary tree traverse, add/delete nodes, etc. are popular in algorithm questions. The binary trees are often just a binary tree or binary search tree. Sometimes, the problem pinpoints a particular type of a binary tree, for example, a balanced binary tree or complete binary tree.</summary></entry><entry><title type="html">Catalan number</title><link href="http://localhost:4000/2019/09/09/catalan-number.html" rel="alternate" type="text/html" title="Catalan number" /><published>2019-09-09T04:41:00+09:00</published><updated>2019-09-09T04:41:00+09:00</updated><id>http://localhost:4000/2019/09/09/catalan-number</id><content type="html" xml:base="http://localhost:4000/2019/09/09/catalan-number.html">&lt;p&gt;What is &lt;strong&gt;Catalan number&lt;/strong&gt; ?
The Catalan number belongs to the domain of combinatorial mathematics.
It is a sequence of natural numbers such that:
&lt;code&gt;1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, ...&lt;/code&gt;
The sequence appears in counting problems.
Wikipedia has the details about the sequence: &lt;a href=&quot;https://en.wikipedia.org/wiki/Catalan_number&quot;&gt;Catalan Number&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The algorithm of the Catalan number calculation is not difficult.
Once the problem is identified as the Catalan number,
the solution will come up relatively easy.
However, something not easy is to identify it is the Catalan number problem.&lt;/p&gt;

&lt;h4 id=&quot;various-types-of-counting-problems&quot;&gt;Various types of counting problems&lt;/h4&gt;

&lt;p&gt;The Wikipedia article mentions various types of counting problems which are solved by the Catalan number.
One more great resource is “Catalan Numbers” (&lt;a href=&quot;http://www.geometer.org/mathcircles/catalan.pdf&quot;&gt;http://www.geometer.org/mathcircles/catalan.pdf&lt;/a&gt;).
The document refers to multiple counting problems as well as how to solve those.
For a reference, it’s worth writing a memo what kind of problems are out there.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Balanced parentheses&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n&lt;/code&gt; pairs of parentheses, how many patterns exist to create
 valid (balanced) combinations of parentheses.&lt;/p&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; n  counts  patterns
 0  1       *
 1  1       ()
 2  2       (()) ()()
 3  5       ((())) ()(()) ()()() (())() (()())
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Note: This is a basic pattern of the Catalan number.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dyck words&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n&lt;/code&gt;, how many patterns exist to create words of n Xs and n Ys such that
 in every prefix of the word frequency(‘X’) ≥ frequency(‘Y’)&lt;/p&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; n  counts  patterns
 0  1       *
 1  1       XY
 2  2       XXYY XYXY
 3  5       XXXYYY XYXXYY XYXYXY XXYYXY XXYXYY
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Note: If X and Y are mapped ( and ) respectively, the problem is the same as
 the balanced parentheses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mountain Ranges&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n&lt;/code&gt; pairs of sticks, how many patterns exist to create mountains.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; n  counts  patterns
 0  1       *
 1  1       /\
 2  2       /\
           /  \  /\/\
 3  5        /\
            /  \     /\             /\      /\/\
           /    \  /\/  \  /\/\/\  /  \/\  /    \
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Note: If / and \ are mapped to ( and ) respectively, the problem is the same as
 the balanced parentheses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Binary Search Trees&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n&lt;/code&gt;, how many unique binary search tress exist to create node value &lt;code&gt;1 to n&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Example:&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt; n  counts  patterns
 0  1       *
 1  1       1
 2  2         2  1
             /    \
            1      2
 3  5           3    3     2    1    1
               /    /     / \    \    \
             2    1     1   3    3    2
            /      \            /      \
           1        2          2        3
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Diagonal Paths&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n x n&lt;/code&gt; grid, how many paths of length &lt;code&gt;2n&lt;/code&gt; exist from bottom left to upper right corner.&lt;/p&gt;

    &lt;p&gt;Example:&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt; n  counts  patterns
 0  1       *
 1  1        ↑
            →
 2  2         ↑       ↑
              ↑    ↑ →
           → →    →
 3  5           ↑        ↑         ↑        ↑          ↑
                ↑        ↑      ↑ →      ↑ →           ↑
                ↑   ↑ → →    ↑ →         ↑         ↑ →
           → → →   →        →         → →      → →
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Note: If → and ↑ are mapped to ( and ), the problem is the same as the
 balanced parentheses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiplication orderings&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n+1&lt;/code&gt; numbers to multiply together, how many patterns exist to make multiplication
 precedences without changing the order of numbers.&lt;/p&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; n  counts  patterns
 0  1       (a)
 1  1       (ab)
 2  2       ((ab)c) (a(bc))
 3  5       (((ab)c)d) ((ab)(cd)) ((a(bc))d) (a((bc)d)) (a(b(cd)))
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Polygon Triangulation&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;n+2&lt;/code&gt; sides of convex polygon, how many patterns exist to cut into
 triangles of non-crossing line segments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Handshaking&lt;/p&gt;

    &lt;p&gt;Problem: Given &lt;code&gt;2n&lt;/code&gt; people seated around the round table, how many patterns exists to
 shake hands without crossing arms.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;code-example&quot;&gt;Code Example&lt;/h4&gt;

&lt;p&gt;For all problems above, the number of patterns can be found the code below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/f33be1919df2015a172fd3c80f89aaef.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The first &lt;code&gt;numPatterns&lt;/code&gt; method runs faster if the problem asks only one number such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;leetcode: &lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees/&quot;&gt;Unique Binary Search Trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;topcoder: &lt;a href=&quot;https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=7868&amp;amp;rd=10777&quot;&gt;Hands Shaking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, when problem asks accumulation of patterns such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HackerRank: &lt;a href=&quot;https://www.hackerrank.com/contests/walmart-codesprint-algo/challenges/popsicle-stick-mountains&quot;&gt;Popsicle Stick Mountains&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the second DP solution works to avoid repetition.&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Wikipedia: &lt;a href=&quot;https://en.wikipedia.org/wiki/Catalan_number&quot;&gt;Catalan number&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tom Davis: &lt;a href=&quot;http://www.geometer.org/mathcircles/catalan.pdf&quot;&gt;Catalan Numbers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GeeksforGeeks: &lt;a href=&quot;https://www.geeksforgeeks.org/program-nth-catalan-number/&quot;&gt;Program for nth Catalan Number&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">What is Catalan number ? The Catalan number belongs to the domain of combinatorial mathematics. It is a sequence of natural numbers such that: 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, ... The sequence appears in counting problems. Wikipedia has the details about the sequence: Catalan Number.</summary></entry><entry><title type="html">Prime Check of a Big Number</title><link href="http://localhost:4000/2019/09/05/prime-check-of-a-big-number.html" rel="alternate" type="text/html" title="Prime Check of a Big Number" /><published>2019-09-05T13:05:00+09:00</published><updated>2019-09-05T13:05:00+09:00</updated><id>http://localhost:4000/2019/09/05/prime-check-of-a-big-number</id><content type="html" xml:base="http://localhost:4000/2019/09/05/prime-check-of-a-big-number.html">&lt;p&gt;“Given an integer &lt;code&gt;n&lt;/code&gt;, find whether &lt;code&gt;n&lt;/code&gt; is a prime number or not” – This is a typical
algorithm question.
If the given number is small, repeating a division from 2 to &lt;code&gt;n&lt;/code&gt; gives the answer.&lt;/p&gt;

&lt;p&gt;A better solution would be to stop looping at square root of &lt;code&gt;n&lt;/code&gt;.
Suppose the given number &lt;code&gt;n&lt;/code&gt; is not a prime number (composite number), the &lt;code&gt;n&lt;/code&gt; has
two numbers &lt;code&gt;a, b&lt;/code&gt; where &lt;code&gt;n = ab&lt;/code&gt;.
From the equation, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; should be equal to or less than square root of &lt;code&gt;n&lt;/code&gt;.
So, if the factor of &lt;code&gt;n&lt;/code&gt; exists, the factor should be the equal to or less than square root of &lt;code&gt;n&lt;/code&gt;.
Checking the number up to square root of &lt;code&gt;n&lt;/code&gt; is enough to find &lt;code&gt;n&lt;/code&gt; is prime or not.&lt;/p&gt;

&lt;p&gt;However, looping over up to square root of &lt;code&gt;n&lt;/code&gt; runs slow still once the given number becomes bigger.
Well-known faster algorithm is the Sieve of Eratosthenes (&lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;Wikipedia&lt;/a&gt;).
The algorithm starts from a boolean array of size n initialized by &lt;code&gt;true&lt;/code&gt; value.
The iteration goes from 2 to n while crossing out all multiples of 2, then 3, 5, … (set &lt;code&gt;false&lt;/code&gt; to all multiples of 2, 3, 5…).
In the end, if the last array element is true, the given number &lt;code&gt;n&lt;/code&gt; is confirmed the prime number.&lt;/p&gt;

&lt;p&gt;The problem of the Sieve of Eratosthenes is a memory consumption.
HackerRank problem has teasing test cases of &lt;code&gt;100000003&lt;/code&gt; and &lt;code&gt;1000000007&lt;/code&gt;.
Those numbers easily cause memory out of error.
The naive looping approach ends up in a timeout failure.&lt;/p&gt;

&lt;h4 id=&quot;combination-of-sieve-and-looping&quot;&gt;Combination of Sieve and Looping&lt;/h4&gt;

&lt;p&gt;There should be plenty of solutions to find a given big number is a prime or not.
What came up in my mind is a combination of the sieve and looping over.
The first step is to find all prime numbers up to square root of the given number using the sieve.
The second step is to loop over the division by prime numbers found in the first step.
This solution has the time complexity of O(square root of n), which made all HackerRank test cases pass.
The solution would be a good entry here as my memo.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/6a16de49404c7306019b052cdb7b9401.js&quot;&gt; &lt;/script&gt;</content><author><name>Yoko Harada</name></author><summary type="html">“Given an integer n, find whether n is a prime number or not” – This is a typical algorithm question. If the given number is small, repeating a division from 2 to n gives the answer.</summary></entry><entry><title type="html">HackerRank Code Testing by Clojure</title><link href="http://localhost:4000/2019/08/29/hackerank-code-testing-by-clojure.html" rel="alternate" type="text/html" title="HackerRank Code Testing by Clojure" /><published>2019-08-29T08:20:00+09:00</published><updated>2019-08-29T08:20:00+09:00</updated><id>http://localhost:4000/2019/08/29/hackerank-code-testing-by-clojure</id><content type="html" xml:base="http://localhost:4000/2019/08/29/hackerank-code-testing-by-clojure.html">&lt;p&gt;Recently, I decided to give Clojure a try.
This post is about testing HackerRank problems on a local env.&lt;/p&gt;

&lt;p&gt;I used to write Clojure code for my day job, however, no Clojure at all for two years.
Instead, almost all were done by Python.
I became familiar with Python’s functional programming world now.
Aside of ML/DL projects, I did bunch at HackerRank, leetcode or sort.
After a while, I thought, “maybe I can solve problems by Clojure like Python…”&lt;/p&gt;

&lt;p&gt;Luckily, HackerRank supports Clojure. So, I started.&lt;/p&gt;

&lt;p&gt;Soon, I hit the wall. I wanted to test a code. Okay, writing test is not hard.
Something quite hard was the HackerRank platform.
Test data comes in from &lt;code&gt;STDIN&lt;/code&gt;. Something output to &lt;code&gt;STDOUT&lt;/code&gt; is tested.
For many problems, it’s effective to have &lt;code&gt;read-line&lt;/code&gt; and &lt;code&gt;println&lt;/code&gt; in the code side.&lt;/p&gt;

&lt;p&gt;I did quite a lot of research and trials so that the code can be tested
without any modification on HackerRank platform.
This experience, setting up a testing environment was a good Clojure study.
That’s why I wrote the blog post.
This post may help other Clojure newbies to figure out how.&lt;/p&gt;

&lt;h4 id=&quot;binding-stdin&quot;&gt;Binding &lt;code&gt;STDIN&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Clojure has &lt;a href=&quot;https://clojuredocs.org/clojure.core/binding&quot;&gt;&lt;code&gt;clojure.core/binding&lt;/code&gt;&lt;/a&gt; function.
This function is used to create new bindings, which is like, replacing the current bindings.
In Clojure, &lt;code&gt;STDIN&lt;/code&gt; is bind to &lt;code&gt;*in*&lt;/code&gt;.
So, what should be done is to bind &lt;code&gt;*in*&lt;/code&gt; to something else.&lt;/p&gt;

&lt;p&gt;Next question is what should be “something else.”&lt;/p&gt;

&lt;p&gt;HackerRank test case is provided by a file.
People can get the test data file if they pay 5 Hackos.
The “Hackos” are points people can get when their solutions successfully pass all tests.
Unless the problem is a very entry level, the test case file tends to pretty big.
It’s unable to write the test data in the code often.
For this reason, I wanted to get the test data from a file and bind it to &lt;code&gt;*in*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What I did was:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;create a file under &lt;code&gt;resource&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;read it as a resource&lt;/li&gt;
  &lt;li&gt;convert it to a reader&lt;/li&gt;
  &lt;li&gt;bind the reader to &lt;code&gt;*in*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(require &apos;[clojure.java.io :as io])
(with-open [rdr (io/reader (io/resource n))]
    (binding [*in* rdr]
      (f)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the project was created by the &lt;a href=&quot;https://leiningen.org/&quot;&gt;&lt;code&gt;leningen&lt;/code&gt;&lt;/a&gt;,
the &lt;code&gt;resources&lt;/code&gt; directory is already on the path. Just to give a relative file path
as &lt;code&gt;n&lt;/code&gt;, the file is read. The &lt;code&gt;f&lt;/code&gt; is a function which consumes data from &lt;code&gt;STDIN&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;catching-stdout&quot;&gt;Catching &lt;code&gt;STDOUT&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Now, reading from &lt;code&gt;STDIN&lt;/code&gt; was cleared. Next will be to catch &lt;code&gt;STDOUT&lt;/code&gt;.
Clojure has a convenient function &lt;a href=&quot;https://clojuredocs.org/clojure.core/with-out-str&quot;&gt;&lt;code&gt;clojure.core/with-out-str&lt;/code&gt;&lt;/a&gt;.
Compared to a reading part, catching &lt;code&gt;STDOU&lt;/code&gt; was much easier.
For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;;; define function which prints to stdout
&amp;gt; (defn say-it []
    (println &quot;seriously?&quot;)
    (println &quot;can&apos;t believe&quot;))

;; assign STDOUT to &quot;out&quot;
&amp;gt; (def out (with-out-str (say-it)))

;; what&apos;s in the &quot;out&quot;
&amp;gt; out
&quot;seriously?\ncan&apos;t believe\n&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same idea for the reading can be applied to &lt;code&gt;STDOUT&lt;/code&gt; – printing out to a file under &lt;code&gt;resources&lt;/code&gt; directory.
However, in general, the expected output is simple for the HackerRank problems.
At this moment, &lt;code&gt;with-out-str&lt;/code&gt; function satisfies my needs.&lt;/p&gt;

&lt;h4 id=&quot;wrapping-tests&quot;&gt;Wrapping Tests&lt;/h4&gt;

&lt;p&gt;So far, &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; work well to fit with the HackerRank platform.
However, to bind resource reader to &lt;code&gt;STDIN&lt;/code&gt;, I should write &lt;code&gt;with-open ...&lt;/code&gt; in every test case. 
I want to avoid writing the same lines again and again.
After searching online, I found &lt;a href=&quot;https://clojuredocs.org/clojure.test/use-fixtures&quot;&gt;&lt;code&gt;clojure.test/use-fixtures&lt;/code&gt;&lt;/a&gt; function.
This function works like Unit test’s &lt;code&gt;setUp()/tearDown()&lt;/code&gt; methods.
As the Clojure API document explains:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn my-test-fixture [f]
        (create-db)   ;; setUp
        (f)           ;; test
        (destroy-db)) ;; tearDown
(use-fixtures :once my-test-fixture
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Define the fixture function, then call &lt;code&gt;use-fixture&lt;/code&gt; function.
The tests in the same namespace are all wrapped by the fixture.&lt;/p&gt;

&lt;p&gt;Below is an example test by the &lt;code&gt;use-fixture&lt;/code&gt; function.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/efad0031c483bcc77ea9ada37e708db2.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h4&gt;

&lt;p&gt;The function &lt;code&gt;use-fixture&lt;/code&gt; made my test code simple. It’s good.
However, it has a downside.
Some problems provide multiple test cases, which means multiple resource files on my test environment.
Since only one &lt;code&gt;use-fixture&lt;/code&gt; is applied to all tests in the same namespace,
my &lt;code&gt;wrap-test&lt;/code&gt; and fixture design don’t work nicely.
There should be a way to cope with this problem.
It will be my next challenge.&lt;/p&gt;

&lt;p&gt;If you are interested, my solution and test code for &lt;a href=&quot;https://www.hackerrank.com/domains/tutorials/30-days-of-code&quot;&gt;30 Days of Code&lt;/a&gt;
are in my repository, &lt;a href=&quot;https://github.com/yokolet/thirty-day-code&quot;&gt;thirty-day-code&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yoko Harada</name></author><summary type="html">Recently, I decided to give Clojure a try. This post is about testing HackerRank problems on a local env.</summary></entry><entry><title type="html">Maximal Square and Rectangle</title><link href="http://localhost:4000/2017/06/16/maximal-area.html" rel="alternate" type="text/html" title="Maximal Square and Rectangle" /><published>2017-06-16T00:00:00+09:00</published><updated>2017-06-16T00:00:00+09:00</updated><id>http://localhost:4000/2017/06/16/maximal-area</id><content type="html" xml:base="http://localhost:4000/2017/06/16/maximal-area.html">&lt;p&gt;A bunch of algorithm questions take a style of “maximum is a good thing.”
Maximal sum, maximal length or maximal size are examples.
This memo is about maximal size, precisely, square and rectangle.&lt;/p&gt;

&lt;p&gt;These two have quite similar descriptions. So, I call those siblings.
The problems are “given 2D matrix filled with 0’s and 1’s, find maximal square/rectangle.”
Approaches how to solve are also similar.
However, a difficulty level is not the same.
The maximal square question is much easier.
The maximal rectangle question needs an additional step to find the maximum.&lt;/p&gt;

&lt;p&gt;I’m going to start off with the maximal square.&lt;/p&gt;

&lt;h4 id=&quot;problem-description---maximal-square&quot;&gt;Problem Description - Maximal Square&lt;/h4&gt;

&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the maximal square with all 1’s.&lt;/p&gt;

&lt;p&gt;For example, following 2D matrix is given:&lt;/p&gt;

&lt;pre&gt;

1   0   1   0   0

1   0   1   1   1

1   1   1   1   1

1   0   0   1   0

&lt;/pre&gt;

&lt;p&gt;The answer will be 4.&lt;/p&gt;

&lt;pre&gt;

1   0   1   0   0
      +-------+
1   0 | 1   1 | 1
      |       |
1   1 | 1   1 | 1
      +-------+
1   0   0   1   0

&lt;/pre&gt;

&lt;h4 id=&quot;the-idea-to-find-maximal-square&quot;&gt;The idea to find maximal square&lt;/h4&gt;

&lt;p&gt;This is a dynamic programming question, so optimal substructure exists:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;include the current cell to form a square&lt;/li&gt;
  &lt;li&gt;exclude the current call&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The state to maintain in the auxiliary table is the size of the square so far.
Following the DP manner, the table will be created by bottom up.&lt;/p&gt;

&lt;p&gt;The first column and row remain as those are.
When the value of matrix at i’th row and j’th column is 1,
look above, above-left, and left.
Among three, find minimum then plus one.
This is the value in the auxiliary table.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-finding-maximal-square&quot;&gt;Java code for finding maximal square&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/6855bc82a187fa8cd2316973bdbe03dd.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The performance is: time O(nm), space O(nm), where n: rows, m: columns&lt;/p&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;pre&gt;

4

&lt;/pre&gt;

&lt;h4 id=&quot;problem-description---maximal-rectangle&quot;&gt;Problem Description - Maximal Rectangle&lt;/h4&gt;

&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the maximal rectangle with all 1’s.&lt;/p&gt;

&lt;p&gt;For example, following 2D matrix is given:&lt;/p&gt;

&lt;pre&gt;

1   0   1   0   0

1   0   1   1   1

1   1   1   1   1

1   0   0   1   0

&lt;/pre&gt;

&lt;p&gt;The answer will be 6.&lt;/p&gt;

&lt;pre&gt;

1   0   1   0   0
      +-----------+
1   0 | 1   1   1 |
      |           |
1   1 | 1   1   1 |
      +-----------+
1   0   0   1   0

&lt;/pre&gt;

&lt;h4 id=&quot;the-idea-to-find-maximal-rectangle&quot;&gt;The idea to find maximal rectangle&lt;/h4&gt;

&lt;p&gt;Also, this is a dynamic programming problem, but has an extra process.
The first step of DP sees vertically.
The second step sees horizontally.&lt;/p&gt;

&lt;p&gt;For the DP step, the optimal substructure exists, like the square problem.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;include the current cell to form a rectangle&lt;/li&gt;
  &lt;li&gt;exclude the current cell&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The state to maintain in the auxiliary table is the size of 1’s of vertical stretch.
Following the DP manner, the table will be created by bottom up.
When the value of matrix at i’th row and j’th column is 1, look above then plus one.
This is the value in the auxiliary table.&lt;/p&gt;

&lt;p&gt;After creating the auxiliary table, I need to find the maximal area looking at horizontally.
How to find it?
This is exactly the same as &lt;a href=&quot;http://yokolet.github.io/2017/05/25/largest-rectangle-in-histogram.html&quot;&gt;Largest Rectangle in Histogram&lt;/a&gt; problem.&lt;/p&gt;

&lt;p&gt;The second step looks each row to find its max.
By comparison of each max, I can get the maximal area.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-finding-maximal-rectangle&quot;&gt;Java code for finding maximal rectangle&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/0e865893f44e5329c138a4cb24be4d45.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The performance is: time O(nm), space O(nm), where n: rows, m: columns&lt;/p&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;pre&gt;

6

&lt;/pre&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/&quot;&gt;Maximum size square sub-matrix with all 1s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/2014/06/leetcode-maximal-square-java/&quot;&gt;Maximal Square&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://algorithms.tutorialhorizon.com/dynamic-programming-maximum-size-square-sub-matrix-with-all-1s/&quot;&gt;Maximum size square sub-matrix with all 1s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/maximum-size-rectangle-binary-sub-matrix-1s/&quot;&gt;Maximum size rectangle binary sub-matrix with all 1s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/2014/05/leetcode-maximal-rectangle-java/&quot;&gt;Maximal Rectangle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">A bunch of algorithm questions take a style of “maximum is a good thing.” Maximal sum, maximal length or maximal size are examples. This memo is about maximal size, precisely, square and rectangle.</summary></entry><entry><title type="html">Iterator To Flatten It</title><link href="http://localhost:4000/2017/06/15/iterator-to-flatten.html" rel="alternate" type="text/html" title="Iterator To Flatten It" /><published>2017-06-15T00:00:00+09:00</published><updated>2017-06-15T00:00:00+09:00</updated><id>http://localhost:4000/2017/06/15/iterator-to-flatten</id><content type="html" xml:base="http://localhost:4000/2017/06/15/iterator-to-flatten.html">&lt;p&gt;Let’s revisit the Iterator pattern.
“Iterator” is one of design patterns in object-oriented programming (OOP).
Needless to say, extremely famous Gang of Four (Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides) are creators.
As in the Wikipedia’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Iterator_pattern&quot;&gt;Iterator pattern&lt;/a&gt;,
the iterator pattern is used when traversing &lt;em&gt;container&lt;/em&gt; without knowing how the container works. It is OOP’s favorite pattern to “decouple” the iterator from container.&lt;/p&gt;

&lt;p&gt;What does that actually mean? The iterator defines two methods, &lt;code&gt;hasNext()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;.
Repeating these two method, I can traverse all elements in the container.
For example, Java’s ArrayList are LinkedList examples of the containers.
These two have different data structures, but I can traverse all elements exactly the same way: &lt;code&gt;hasNext()&lt;/code&gt; and &lt;code&gt;nex()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the iterator is a handy feature, many including custom classes provide a way to access their elements by the iterator.
Probably, this is a reason I see various iterator implementation problems.
The iterator looks a good topic to leave a memo, so I’m going to write about two iterators here.
These two will flatten nested structure: 2D vector and nested list.&lt;/p&gt;

&lt;h4 id=&quot;problem-description---flatten-2d-vector&quot;&gt;Problem Description - Flatten 2D Vector&lt;/h4&gt;

&lt;p&gt;“Implement an iterator to flatten 2D vector” is the problem.
It is the iterator, so the implementation should have &lt;code&gt;hasNext()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; methods.
Repeating these two methods, all elements in 2D vector should be traversed.
For example, &lt;code&gt;[[1, 2], [3], [4, 5, 6]]&lt;/code&gt; is given, the code:&lt;/p&gt;

&lt;pre&gt;

    while (v2DIter.hasNext()) {
        result.add(v2DIter.next());
    }

&lt;/pre&gt;

&lt;p&gt;should add all elements to the result list.
When it finishes, the result should be &lt;code&gt;[1, 2, 3, 4, 5, 6]&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-implement-iterator-to-flatten-2d-vector&quot;&gt;The idea to implement iterator to flatten 2D vector&lt;/h4&gt;

&lt;p&gt;This sort of nested something is often solved by iterator of iterators approach.
A parent iterator traverses vectors, say &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[3]&lt;/code&gt;.
Child iterators traverse individual elements, say &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The most challenging part is when and how to update the child iterator.
Choices are only two: either &lt;code&gt;hasNext()&lt;/code&gt; or &lt;code&gt;next()&lt;/code&gt; method must be responsible to update.
In general, it is reasonable to do in &lt;code&gt;next()&lt;/code&gt; method.
This is because, updating the itereator changes a current element where the iterator points.
This behavior is something unexptected for &lt;code&gt;hasNext()&lt;/code&gt;, but reasonable to &lt;code&gt;next()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-iterating-2d-vector&quot;&gt;Java code for iterating 2D Vector&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/21551034731033910bc6ebe216bfee14.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Above prints:&lt;/p&gt;

&lt;pre&gt;

1, 2, 3, 4, 5, 6, 

&lt;/pre&gt;

&lt;h4 id=&quot;problem-description---flatten-nested-list&quot;&gt;Problem Description - Flatten Nested List&lt;/h4&gt;

&lt;p&gt;“Implement an iterator to flatten nested list” is the problem.
Like previous problem, the iterator implementation should have &lt;code&gt;hasNext()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; methods.
Repeating these two methods, all elements in the nested list should be traversed.
For example, &lt;code&gt;[[1, 2], 3, [4, [5, 6]]]&lt;/code&gt; is given, the code:&lt;/p&gt;

&lt;pre&gt;

    while (nestedLIter.hasNext()) {
        result.add(nestedLIter.next());
    }

&lt;/pre&gt;

&lt;p&gt;should add all elements to the result list.
When it finishes, the result should be &lt;code&gt;[1, 2, 3, 4, 5, 6]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is similar to flatten 2D vector.
Big difference is inside of an outermost list is not always a list.
Inner elements may be an integer, list, or nested list.
This problem is more complicated compared to the previous one.&lt;/p&gt;

&lt;p&gt;To express each element in the nested list,
the interface &lt;code&gt;NestedInteger&lt;/code&gt; is provided.&lt;/p&gt;

&lt;pre&gt;

    interface NestedInteger {
        boolean isInteger();
        Integer getInteger();
        List&amp;lt;NestedInteger&amp;gt; getList();
    }

&lt;/pre&gt;

&lt;h4 id=&quot;the-idea-to-implement-iterator-to-flatten-nested-list&quot;&gt;The idea to implement iterator to flatten nested list&lt;/h4&gt;

&lt;p&gt;Here again, this sort of nested something can be solved by iterator of iterators approach.
In this case, iterator of iterafor of iterator of … may be there.
To keep track the data something like … of … of … of …., a stack would be a good data structure.&lt;/p&gt;

&lt;p&gt;If I find the itereator points a list, I will stack it.
Then, I will pull out an inner iterator.
If the inner iteartor points another list, I will stack it.
Then, I will pull out the inner of inner iterator (repeat this as long as needed).
At some level, pulled out iterator should point an integer.
This is the value to add to the result.&lt;/p&gt;

&lt;p&gt;Likewise, the challenging part is when and how to update the iterators.
Following the policy, “reasonable to do in &lt;code&gt;next()&lt;/code&gt; method,
the iterators will be updated in &lt;code&gt;next()&lt;/code&gt;.
However, in this case, I saved a current integer value to an instance variable.
This is because current interator may or may not points a value. It may another itereator.
Saving a &lt;em&gt;next&lt;/em&gt; value makes easy to update the iterators.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-iterating-nested-list&quot;&gt;Java code for iterating nested list&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/e9f1387f213e872d15697d5d13eaedcd.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/2014/05/leetcode-flatten-nested-list-iterator-java/&quot;&gt;Flatten Nested List Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">Let’s revisit the Iterator pattern. “Iterator” is one of design patterns in object-oriented programming (OOP). Needless to say, extremely famous Gang of Four (Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides) are creators. As in the Wikipedia’s Iterator pattern, the iterator pattern is used when traversing container without knowing how the container works. It is OOP’s favorite pattern to “decouple” the iterator from container.</summary></entry><entry><title type="html">Valid Combinations of Numbers</title><link href="http://localhost:4000/2017/06/14/valid-number-combinations.html" rel="alternate" type="text/html" title="Valid Combinations of Numbers" /><published>2017-06-14T00:00:00+09:00</published><updated>2017-06-14T00:00:00+09:00</updated><id>http://localhost:4000/2017/06/14/valid-number-combinations</id><content type="html" xml:base="http://localhost:4000/2017/06/14/valid-number-combinations.html">&lt;p&gt;Various types of string related problems exist.
Among them, splitting it to make something valid would be a typical one.
For example, a string of numbers is given, “make valid IP addresses” is the example.
Very similar problem is “make valid lottery numbers.”&lt;/p&gt;

&lt;p&gt;When the given string is made by alphabetical characters,
the problem may ask word breaks with a dictionary.&lt;/p&gt;

&lt;p&gt;“Valid IP addresses” and “valid lottery numbers” are quite similar problems.
I’m going to write a memo about these two here.&lt;/p&gt;

&lt;h4 id=&quot;problem-description---restore-ip-addresses&quot;&gt;Problem Description - Restore IP Addresses&lt;/h4&gt;

&lt;p&gt;Given a string, restore valid IP addresses.
For example, “25525511135” is given, the answer will be [“255.255.11.135”, “255.255.111.35”].&lt;/p&gt;

&lt;p&gt;There are some constraints to make it the valid IP address.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;valid IP addresses should have four parts separated by “.”(dot).&lt;/li&gt;
  &lt;li&gt;each digits must be between 0 to 255&lt;/li&gt;
  &lt;li&gt;if the character is ‘0’, it should not be followed by any number. ex) 255.0.0.1&lt;/li&gt;
  &lt;li&gt;must use all characters in the same order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When all of the constraints are met, the string becomes the valid IP address.&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-split-a-string-to-make-ip-addresses&quot;&gt;The idea to split a string to make IP addresses&lt;/h4&gt;

&lt;p&gt;If I think of the first part, it will be three patterns in maximum.
For example, “25525511135” is given, “2”, “25”, and “255 are all valid numbers to start.
When the first part is “2”, the valid second part will be “5” and “55.”
Possible combinations create tree structure as in below.&lt;/p&gt;

&lt;pre&gt;

            /           |          \
          /             |            \
         2             25            255
      /  |         /    |         /   |   \
    /    |      /       |       /     |      \
   5     55     5      52      2      25     255
  | \  / | \  / | \   /   \  / | \  /   \   / | \

&lt;/pre&gt;

&lt;p&gt;When four parts of an IP address are created using valid numbers, another check runs:
whether all given characters are used or not.
If yes, I will add the IP address to the result list.&lt;/p&gt;

&lt;p&gt;To solve this problem, I see a Depth First Search (DFS) works well.
People have solved by various approaches, however, DFS is straightforward.
This is because finding the answer is traversing a tree.&lt;/p&gt;

&lt;p&gt;In each step, take one to three characters.
When the number is valid, make it a part of IP address.
Going deeper and take one to three characters, …(repeat)…
In the end, check whether all characters are used to create valid four parts of IP address.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-restoring-valid-ip-addresses&quot;&gt;Java code for restoring valid IP addresses&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/3fdcfbc84049a1a94deaae80dced35fb.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Above prints:&lt;/p&gt;

&lt;pre&gt;

[255.255.11.135, 255.255.111.35]
[0.0.0.0]

&lt;/pre&gt;

&lt;p&gt;Time complexity: O(3^4).&lt;/p&gt;

&lt;h4 id=&quot;problem-description---restore-lottery-numbers&quot;&gt;Problem Description - Restore Lottery Numbers&lt;/h4&gt;

&lt;p&gt;Given a string, restore valid lottery numbers.
For example, “4938532894754” is given, the answer will be [“49 38 53 28 9 47 54”].&lt;/p&gt;

&lt;p&gt;The problem description sometimes starts from “uncle, Morty.”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your favorite uncle, Morty, is crazy about the lottery and
even crazier about how he picks his “lucky” numbers…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like the IP address problem, there are some constraints to make it valid.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;valid lottery numbers should have 7 parts separated by “ “(space).&lt;/li&gt;
  &lt;li&gt;each digits must be between 1 and 59&lt;/li&gt;
  &lt;li&gt;all digits are unique&lt;/li&gt;
  &lt;li&gt;must use all characters in the same order&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-idea-to-split-a-string-to-make-lottery-numbers&quot;&gt;The idea to split a string to make lottery numbers&lt;/h4&gt;

&lt;p&gt;This is almost identical to valid IP address problem.
The small differences are from four parts to seven, from dot to space,
and from 0-255 to 1-59.
Relatively big difference is, in lottery problem, each digit is unique.&lt;/p&gt;

&lt;p&gt;To check uniqueness, I added a set in the DFS interaction:
add the number to set when going deeper, remove the number when coming back.&lt;/p&gt;

&lt;p&gt;Except the differences above, the code is the same as valid IP addresses.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-restoring-valid-lottery-numbers&quot;&gt;Java code for restoring valid lottery numbers&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/0b565ac9e3340dba6b91a3e15cf104d1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;pre&gt;

[49 38 53 28 9 47 54]

[1 6 3 46 16 5 12, 1 6 3 46 16 51 2, 16 3 46 1 6 5 12, 16 3 46 1 6 51 2]

[]

&lt;/pre&gt;

&lt;p&gt;Time complexity: O(2^7)&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qa.geeksforgeeks.org/3336/print-all-valid-combinations-of-ip-address&quot;&gt;Print all valid combinations of IP address&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/2014/06/leetcode-restore-ip-addresses-java/&quot;&gt;Restore IP Addresses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/raviswan/ProgrammingProblems&quot;&gt;Lottery Ticket Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sdeskills.com/qotd-2016-oct-28-winning-ticket/&quot;&gt;Winning Ticket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">Various types of string related problems exist. Among them, splitting it to make something valid would be a typical one. For example, a string of numbers is given, “make valid IP addresses” is the example. Very similar problem is “make valid lottery numbers.”</summary></entry><entry><title type="html">Weird Puzzle Questions - Egg and Celebrity</title><link href="http://localhost:4000/2017/06/13/weird-puzzles.html" rel="alternate" type="text/html" title="Weird Puzzle Questions - Egg and Celebrity" /><published>2017-06-13T00:00:00+09:00</published><updated>2017-06-13T00:00:00+09:00</updated><id>http://localhost:4000/2017/06/13/weird-puzzles</id><content type="html" xml:base="http://localhost:4000/2017/06/13/weird-puzzles.html">&lt;p&gt;I’m going to write about two weird algorithm problems.
Those seem quite weired at least to me, yet famous as algorithm questions.
One is so-called egg dropping, another is finding a celebrity.
I see these two problems here and there.
From that, I guess those two are famous algorithm questions.
But, at least, those two are quite weird.
Some call them &lt;em&gt;puzzle&lt;/em&gt;. (Yeah, maybe… I was totally puzzled.)&lt;/p&gt;

&lt;p&gt;The egg dropping and finding a celebrity problems are unrelated.
The approaches and solutions are very different.
However, in terms of their weirdness,
I’m going to write a memo put those two together here.&lt;/p&gt;

&lt;h4 id=&quot;problem-description---egg-dropping&quot;&gt;Problem Description - Egg Dropping&lt;/h4&gt;

&lt;p&gt;Many algorithm questions have succinct descriptions.
Not like those, this problem needs lengthy explanation.
I re-read a few times to understand such long description correctly.
Also, it was to figure out how to solve the problem.&lt;/p&gt;

&lt;p&gt;The problem is sometime called “Two Egg Problem” since often &lt;em&gt;two&lt;/em&gt; eggs are used.
These two eggs play a role to find the highest, safe floor to drop the egg without breaking it.
The problem description is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;K floors are there in total.&lt;/li&gt;
  &lt;li&gt;There exists the highest floor an egg safely lands.&lt;/li&gt;
  &lt;li&gt;Two (or more) eggs are given.&lt;/li&gt;
  &lt;li&gt;If the egg doesn’t break after the dropping, it can be reused.&lt;/li&gt;
  &lt;li&gt;If the egg breaks, the broken egg won’t be used again.&lt;/li&gt;
  &lt;li&gt;If the egg safely lands after dropping from the floor K_j, lower floors of K_j are considered safe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given above conditions, “find the highest, safe floor to drop the egg” is the problem.&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-find-the-highest-safe-floor&quot;&gt;The idea to find the highest safe floor&lt;/h4&gt;

&lt;p&gt;A bruto force solution is always there which starts dropping the egg from the lowest floor.
Then, try one by one going upward to the top floor.
At some floor, the egg will break for the first time.
One floor below (the last safe floor) is the answer.
If only one egg is available, this is only way to solve the problem.&lt;/p&gt;

&lt;p&gt;However, there’s an effective solution when multiple eggs are available.&lt;/p&gt;

&lt;p&gt;This problem is often categorized to dynamic programming.
So, an optimal substructure exists:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the egg breaks&lt;/li&gt;
  &lt;li&gt;the egg doesn’t break (safely lands)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The state to maintain in memorization table is a minimum number of attemps.
For example, table[i][j] expresses the minimum attemps at i eggs and j-th floor.&lt;/p&gt;

&lt;p&gt;table[i][j] will be calcuated by:&lt;/p&gt;

&lt;pre&gt;

min(1 + max(table[i - 1][k - 1], table[i][j - k])) where k = 1 to j
            ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^
                  breaks          doesn&apos;t break

&lt;/pre&gt;

&lt;h4 id=&quot;java-code-for-finding-the-highest-safe-floor&quot;&gt;Java code for finding the highest safe floor&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/a6843a4336e46e13fa7a3ef44ef2d0b9.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Above prints:&lt;/p&gt;

&lt;pre&gt;

8

&lt;/pre&gt;

&lt;p&gt;Time complexity: O(nk^2), n: eggs, k: floors&lt;/p&gt;

&lt;h4 id=&quot;problem-description---finding-a-celebrity&quot;&gt;Problem Description - Finding a Celebrity&lt;/h4&gt;

&lt;p&gt;This problem also has a lot of descriptions like egg dropping problem.
The details are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;n people come to a party&lt;/li&gt;
  &lt;li&gt;one of them is a celebrity either he or she&lt;/li&gt;
  &lt;li&gt;this only one celebrity does not know anyone in the party&lt;/li&gt;
  &lt;li&gt;all n - 1 people know who is the celebrity&lt;/li&gt;
  &lt;li&gt;only one available question is “does A know B?”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean know(int A, int B)&lt;/code&gt; method is proveded which returns true if A knows B&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given above conditions, “find the celebrity in the minimum
number of questions” is the problem.&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-find-the-celebrity&quot;&gt;The idea to find the celebrity&lt;/h4&gt;

&lt;p&gt;The problem describes relations between people.
If I draw the relations, it will be a directed graph of n people (n nodes).
The celebrity node has an out-degree zero and in-degree n - 1.&lt;/p&gt;

&lt;pre&gt;

              +----------------------+
              |                      |
              v                      |
 (p0) -----&amp;gt; (C) &amp;lt;----- (p2) &amp;lt;----- (p3)
            ^   ^^
            |   | \
            |   |   \
            |   |     \
         (p4) (p5) &amp;lt;--- (p6)

&lt;/pre&gt;

&lt;p&gt;Given the graph above, the method, &lt;code&gt;know(A, B)&lt;/code&gt;, is the same as &lt;code&gt;has an edge from A to B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To solve this problem, a typical approach consists of two steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Elimination step&lt;/li&gt;
  &lt;li&gt;Verification step&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The elimination step eliminates people who are not a celeb apprently.
Here, stack is a good data structure.
After pushing all poeple to the stack, run &lt;code&gt;know&lt;/code&gt; method.
If A has an edge to B, eliminates A since A is not a celeb.
Also, check the edge from B to A.&lt;/p&gt;

&lt;p&gt;The verification step verifies the last person is a celeb.
This is because the elimination process may leave no celeb person in the stack.
For example, a top rightmost node p3 in the graph has two outbound edges.
Suppose the first question is made against the celeb (C), p3 will be removed.
Later, p2 appears, and nobody says “I know p2.”&lt;/p&gt;

&lt;p&gt;For this reason, the verification step is there to
ensure the person in the stack is the celeb.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-square-root-implementation&quot;&gt;Java code for square root implementation&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/8b9e766261890b78e849d162efcf82a1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Time complexity: O(n), space complexity O(n)&lt;/p&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;pre&gt;
1
&lt;/pre&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/dynamic-programming-set-11-egg-dropping-puzzle/&quot;&gt;Dynamic Programming Set 11 (Egg Dropping Puzzle)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3hcaVyX00_4&quot;&gt;Egg Dropping Dynamic Programming (YouTube)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/the-celebrity-problem/&quot;&gt;The Celebrity Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/spring13/cos423/problem0-1.pdf&quot;&gt;Celebrity Identification Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">I’m going to write about two weird algorithm problems. Those seem quite weired at least to me, yet famous as algorithm questions. One is so-called egg dropping, another is finding a celebrity. I see these two problems here and there. From that, I guess those two are famous algorithm questions. But, at least, those two are quite weird. Some call them puzzle. (Yeah, maybe… I was totally puzzled.)</summary></entry><entry><title type="html">Sqrt - Math Without Operator To Do It</title><link href="http://localhost:4000/2017/06/12/sqrt.html" rel="alternate" type="text/html" title="Sqrt - Math Without Operator To Do It" /><published>2017-06-12T00:00:00+09:00</published><updated>2017-06-12T00:00:00+09:00</updated><id>http://localhost:4000/2017/06/12/sqrt</id><content type="html" xml:base="http://localhost:4000/2017/06/12/sqrt.html">&lt;p&gt;In my last post, &lt;a href=&quot;http://yokolet.github.io/2017/06/09/math-without-it.html&quot;&gt;Math Without Operator To Do It&lt;/a&gt;,
I wrote about division an power implementations.
There’s one more of this sort worth adding a memo here.
It is calculating a square root without language provided operators.&lt;/p&gt;

&lt;p&gt;There’s always an intuitive solution, while always effective solutions are.
I’m going to write multiple solutions.&lt;/p&gt;

&lt;h4 id=&quot;problem-description---integer-square-root-implementation&quot;&gt;Problem Description - Integer Square Root Implementation&lt;/h4&gt;

&lt;p&gt;“Given an integer, find its square root in integer.
If the square root is not an integer, the answer will be a floor of it”&lt;/p&gt;

&lt;p&gt;For example, given 11, the answer will be 3.
It is a fairly easy to understand problem.&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-find-a-square-root---naive-iteration&quot;&gt;The idea to find a square root - naive iteration&lt;/h4&gt;

&lt;p&gt;Since the answer will be only integer,
I counld instantly think of a naive solution.
Iterating integer from one to the given number,
I will hit the integer whose multiple of itself exceeds the given number.
Then, the answer will be that integer minus one.&lt;/p&gt;

&lt;pre&gt;
x: given number

for (int i = 2; i &amp;lt; x; i++) {
    if (i * i &amp;gt; x) {
        return i - 1;
    }
}
&lt;/pre&gt;

&lt;p&gt;This will return a correct answer, but the problem is its slowness.
Time complexity is O(n).&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-find-a-square-root---binary-search&quot;&gt;The idea to find a square root - binary search&lt;/h4&gt;

&lt;p&gt;Again, the answer is the integer.
Also, the answer is between 2 to the given number.
All numbers are there in a sorted order.
This is a perfect condition for a binary search.&lt;/p&gt;

&lt;pre&gt;
x: given number

while (low &amp;lt;= high) {
    long mid = (low + high) / 2;
    long temp = mid * mid;
	if (temp &amp;lt;= x) {
        low = mid + 1;
        result = mid;
    } else {
        high = mid - 1;		
    }
}

&lt;/pre&gt;

&lt;p&gt;The binary search improves the performance to O(log(n)).
This should be fast enough.
However, when the given number is big,
I got time out error on the code competition website.&lt;/p&gt;

&lt;h4 id=&quot;the-idea-to-find-a-square-root---newton-raphson-method&quot;&gt;The idea to find a square root - Newton-Raphson method&lt;/h4&gt;

&lt;p&gt;This is a really fast, sophisticated solution.
However, despite of very simple code,
it took a while for me to understand why such calculation gives the answer.&lt;/p&gt;

&lt;p&gt;The Newton-Raphson methed (NR method) has a mathematical, especially,
diffential equation backgound.
Also, NR method is an iterative solution to approximate root.
The important point here is to find a function which satisfies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;diffentiable (continuous)&lt;/li&gt;
  &lt;li&gt;f(x) = 0 for some good value x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given such a nice function, if I think of a slope of that,
it would be:&lt;/p&gt;

&lt;pre&gt;

the slope at point: (x_n, f(x_n)), where y = f(x)

f&apos;(x) = d f(x) / dx

f&apos;(x_n) = (y - f(x_n)) / (x - x_n)

by the definition, y = f(x) = 0,

f&apos;(x_n) = (- f(x_n)) / (x_n+1 - x_n)

x_n+1 = x_n - f(x_n) / f&apos;(x_n)

&lt;/pre&gt;

&lt;p&gt;Now, I got the formula to iterate.
The question is what is f(x).
Since I want to find a number &lt;code&gt;x&lt;/code&gt; to the given number &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;

x = sqrt(a)

x^2 = a

x^2 - a = 0

x^2 - a = 0 = f(x)

f&apos;(x) = 2x

&lt;/pre&gt;

&lt;p&gt;Ok, I got the function, so let’s plugin to the previous formula.&lt;/p&gt;

&lt;pre&gt;

x_n+1 = x_n - (x_n^2 - a) / 2 * x_n

x_n+1 = 1/2 * (2 * x_n - x_n^2 / x_n + a / x_n)

x_n+1 = 1/2 * (2 * x_n - x_n + a / x_n)

x_n+1 = 1/2 * (x_n + a / x_n)

&lt;/pre&gt;

&lt;p&gt;If I iterate above calculation not to exceed the given number,
I’ll get the integer square root.&lt;/p&gt;

&lt;p&gt;The time complexity of NR method is the same as binary search, O(log(n)).
However, it quickly converges to the answer.
This is because the binary search increments the value one by one, while
NR method effectively cuts down to half.&lt;/p&gt;

&lt;h4 id=&quot;java-code-for-square-root-implementation&quot;&gt;Java code for square root implementation&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/yokolet/0a973ce5ef02ae1354fc74c9f92a32c1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The result is:&lt;/p&gt;

&lt;pre&gt;
3
3
46339
46339
46339
&lt;/pre&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/square-root-of-an-integer/&quot;&gt;Square root of an integer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/program-for-newton-raphson-method/&quot;&gt;Program for Newton Raphson Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/NewtonsIteration.html&quot;&gt;Newton’s Iteration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/NewtonsMethod.html&quot;&gt;Newton’s Methos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-is-the-Newton-Rapson-method-for-finding-a-square-root-of-an-integer-number-How-does-one-use-it&quot;&gt;What is the Newton-Raphson method for finding a square root of in integer number? How does one use it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yoko Harada</name></author><summary type="html">In my last post, Math Without Operator To Do It, I wrote about division an power implementations. There’s one more of this sort worth adding a memo here. It is calculating a square root without language provided operators.</summary></entry></feed>